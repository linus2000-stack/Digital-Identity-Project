<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Upload</title>
    <!-- Bootstrap CSS -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Style for the file upload wrapper */
        .file-upload-wrapper {
            position: relative;
            width: 100%;
            height: 200px;
            border: 4px dashed #d6d6d6;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #d6d6d6;
            cursor: pointer;
            text-align: center;
            margin-bottom: 20px;
        }

        /* Hover effect for the file upload wrapper */
        .file-upload-wrapper:hover {
            background-color: #f5f5f5;
        }

        /* Hide the file input field */
        .file-upload-wrapper input[type="file"] {
            display: none;
        }

        /* Style for the text inside the file upload wrapper */
        .file-upload-wrapper span {
            font-size: 20px;
            color: blue;
        }

        /* Style for the file details */
        .file-details {
            margin-top: 10px;
            font-size: 16px;
        }

        /* Style for the dropdown menu and preview button */
        .dropdown-menu, .preview-button {
            margin-top: 10px;
        }

        /* Make the container scrollable */
        body {
            overflow-y: scroll;
        }

        .container {
            max-height: 90vh;
            overflow-y: auto;
            padding-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <!-- Title and instruction -->
        <h1 class="text-center">Select documents to upload</h1>
        
        <!-- Form for file upload -->
        <form id="uploadForm">
            <!-- File upload wrapper -->
            <div class="file-upload-wrapper" data-mdb-file-upload-init id="dropArea">
                <span>Drag and drop a file here</span>
                <input type="file" id="fileInput" multiple>
            </div>

            <!-- Dropdown menu -->
            <div class="dropdown-menu">
                <select class="form-control" id="documentTypeDropdown">
                    <option>Dropdown</option>
                    <option>Item 1</option>
                    <option>Item 2</option>
                    <option>Item 3</option>
                </select>
            </div>

            <!-- File description -->
            <input type="text" class="form-control mt-3" id="fileDescription" placeholder="Description of the file...">
            
            <!-- Preview button -->
            <button type="button" class="btn btn-primary preview-button mt-3">Preview</button>
        </form>
        
        <!-- Status message -->
        <div id="statusMessage" class="text-center mt-3"></div>
        <!-- List of selected files -->
        <div id="fileList" class="text-center mt-3"></div>
    </div>

    <!-- jQuery, Popper.js, and Bootstrap JS for Bootstrap functionality -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

    <!-- JavaScript to handle file upload -->
    <script>
        // Variable to store selected files
        let selectedFiles = [];

        // Function to update the file list display
        function updateFileList() {
            var fileListContainer = document.getElementById('fileList');
            fileListContainer.innerHTML = ''; // Clear previous file list
            selectedFiles.forEach(file => {
                var fileItem = document.createElement('div');
                fileItem.classList.add('file-details');
                // Display file name and formatted size
                fileItem.innerText = file.name + ' (' + formatFileSize(file.size) + ')';
                fileListContainer.appendChild(fileItem);
            });
        }

        // Function to format file size
        function formatFileSize(bytes) {
            const units = ['bytes', 'KB', 'MB', 'GB', 'TB'];
            let unitIndex = 0;
            let size = bytes;

            // Convert bytes to the largest unit possible
            while (size >= 1024 && unitIndex < units.length - 1) {
                size /= 1024;
                unitIndex++;
            }

            // Return size with two decimal places and unit
            return size.toFixed(2) + ' ' + units[unitIndex];
        }

        // Event listeners for drag and drop functionality
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');

        dropArea.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropArea.classList.add('hover'); // Add hover effect on dragover
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('hover'); // Remove hover effect on dragleave
        });

        dropArea.addEventListener('drop', (event) => {
            event.preventDefault();
            dropArea.classList.remove('hover'); // Remove hover effect on drop
            const files = Array.from(event.dataTransfer.files); // Get files from drop event
            selectedFiles = selectedFiles.concat(files); // Add files to selectedFiles
            updateFileList(); // Update the file list display
            document.getElementById('statusMessage').innerText = 'Files attached successfully!';
        });

        // Event listener for form submission to handle the file upload process
        document.getElementById('uploadForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission
            if (selectedFiles.length === 0) {
                document.getElementById('statusMessage').innerText = 'Please select files to upload.';
                return;
            }

            var formData = new FormData();
            selectedFiles.forEach(file => {
                formData.append('files[]', file);
            });

            // Create and send an AJAX request to upload the files
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/your_existing_upload_route', true); // Replace with your actual upload route
            xhr.onload = function () {
                if (xhr.status === 200) {
                    document.getElementById('statusMessage').innerText = 'Files uploaded successfully!';
                } else {
                    document.getElementById('statusMessage').innerText = 'File upload failed! Status: ' + xhr.status + ' Response: ' + xhr.responseText;
                }
            };
            xhr.onerror = function () {
                document.getElementById('statusMessage').innerText = 'File upload failed due to a network error.';
            };
            xhr.send(formData);
        });
    </script>
</body>
</html>

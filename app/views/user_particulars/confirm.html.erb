<div class="container py-3 justify-content-center">
  <h5 class="text-center m-1 text-nowrap">Confirm Your Details and upload a photo</h5>
  <div class='row d-flex justify-content-center gap-2 mt-2'>
    <div class = 'col-5'>
      <%= render 'digitalid' %>
    </div>
    <div class = 'col-lg-5 col-8 d-flex justify-content-center align-items-center'>
<%= form_with model: @user_particular, url: user_particulars_path, method: :post, html: { class: 'h-100 w-100 d-flex flex-grow-1 flex-column justify-content-center align-items-center px-4', style: "max-width 330px; min-width 220px; min-height:290px;"} do |form| %>        
        <%= form.hidden_field :full_name, value: @user_particular.full_name %>
        <%= form.hidden_field :phone_number_country_code, value: @user_particular.phone_number_country_code %>
        <%= form.hidden_field :phone_number, value: @user_particular.phone_number %>
        <%= form.hidden_field :secondary_phone_number_country_code, value: @user_particular.secondary_phone_number_country_code %>
        <%= form.hidden_field :secondary_phone_number, value: @user_particular.secondary_phone_number %>
        <%= form.hidden_field :full_phone_number, value: @user_particular.full_phone_number %>
        <%= form.hidden_field :full_secondary_phone_number, value: @user_particular.full_secondary_phone_number %>
        <%= form.hidden_field :country_of_origin, value: @user_particular.country_of_origin %>
        <%= form.hidden_field :ethnicity, value: @user_particular.ethnicity %>
        <%= form.hidden_field :religion, value: @user_particular.religion %>
        <%= form.hidden_field :gender, value: @user_particular.gender %>
        <%= form.hidden_field :date_of_birth, value: @user_particular.date_of_birth %>
        <%= form.hidden_field :date_of_arrival, value: @user_particular.date_of_arrival %>
        <%= form.hidden_field :photo_url, value: @user_particular.photo_url %>
        <%= form.hidden_field :birth_certificate_url, value: @user_particular.birth_certificate_url %>
        <%= form.hidden_field :passport_url, value: @user_particular.passport_url %>
        <%= form.hidden_field :user_id, value: @user_particular.user_id %>
        <%= form.hidden_field :status, value: "pending" %>
      <label class="m-0">Passport-Style Photo<span class="text-danger">*</span></label>
      <label id="profilePictureLabel" for="profile_picture" class="w-100 h-100 p-1 mb-0 form-group d-flex flex-grow-1 justify-content-center align-items-center text-center text-muted" style="min-wdith:220px; cursor: pointer; border: 5px dashed rgba(198, 198, 198, 0.65);">Upload a photo of yourself here</label>
      <%= form.file_field :profile_picture, id: "profile_picture", accept: 'image/jpeg,image/png', class: "form-control-file", style: "display: none;" %>
      <input type="file" accept="image/*" capture="camera" id="cameraInput" style="display: none;">
      <button type="button" class='mt-1 py-1 btn btn-dark w-100' onclick="startCamera()" data-bs-toggle="modal" data-bs-target="#cameraModal">Or take one right now ðŸ“¸</button>
    </div>

  </div>
        
<div class="d-flex justify-content-center my-3">
  <%= link_to "Back", new_user_particular_path, class: "btn btn-secondary mr-1" %>
  <%= form.submit "Confirm", class: "btn btn-danger" %>
</div>
      <% end %>
</div>
<!-- Modal for taking a photo -->
<div class="modal fade" id="cameraModal" tabindex="-1" aria-labelledby="cameraModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cameraModalLabel">Please capture a photo of yourself</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <video id="cameraFeed" style="width: 100%; height: auto;" autoplay></video>
      </div>
      <div class="modal-footer d-flex justify-content-center">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeModal()">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="capturePhoto()">Capture</button>
      </div>
    </div>
  </div>
</div>
<script>
  // Handles file upload change event
  const fileInput = document.getElementById('profile_picture');
  fileInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const img = document.createElement('img');
        img.src = e.target.result;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';

        const label = document.getElementById('profilePictureLabel');
        label.innerHTML = ''; // Clear existing content
        label.appendChild(img);
      };
      reader.readAsDataURL(file);
    }
  });

  // Handles camera input change event
  function startCamera() {
    const video = document.getElementById('cameraFeed');

    navigator.mediaDevices.getUserMedia({ video: true })
      .then(stream => {
        video.srcObject = stream;
      })
      .catch(err => {
        console.error("Error accessing the camera: ", err);
      });
  }

  function closeModal() {
    const video = document.getElementById('cameraFeed');
    const stream = video.srcObject;
    const tracks = stream.getTracks();

    tracks.forEach(track => {
      track.stop();
    });

    video.srcObject = null;
  }

  function capturePhoto() {
    const video = document.getElementById('cameraFeed');
    const label = document.getElementById('profilePictureLabel');
    const labelWidth = label.clientWidth;
    const labelHeight = label.clientHeight;

    const canvas = document.createElement('canvas');
    canvas.width = labelWidth;
    canvas.height = labelHeight;
    const context = canvas.getContext('2d');
    context.drawImage(video, 0, 0, canvas.width, canvas.height);

    const dataUrl = canvas.toDataURL('image/png'); //base64-encoded image representation string
    const img = document.createElement('img');
    img.src = dataUrl; // This one saves dataUrl into the img.src
    img.style.width = '100%';
    img.style.height = '100%';
    img.style.objectFit = 'cover';

    label.innerHTML = '';
    label.appendChild(img);

    // Convert base64 string to Blob and then to file
    const blob = dataURLToBlob(dataUrl);
    const file = new File([blob], 'profile_picture.png', { type: 'image/png' });

    // Simulates user selecting a file manually
    const fileInput = document.getElementById('profile_picture');
    const dataTransfer = new DataTransfer(); 
    dataTransfer.items.add(file);
    fileInput.files = dataTransfer.files; 

    // Close the modal programmatically using Bootstrap's modal methods
    const modal = bootstrap.Modal.getInstance(document.getElementById('cameraModal'));
    modal.hide();

    closeModal();
  }

  function dataURLToBlob(dataURL) {
    const [header, data] = dataURL.split(',');
    const mime = header.match(/:(.*?);/)[1];
    const binary = atob(data);
    const array = [];

    for (let i = 0; i < binary.length; i++) {
      array.push(binary.charCodeAt(i));
    }

    return new Blob([new Uint8Array(array)], { type: mime });
  }

  // Start camera when modal is shown
  document.getElementById('cameraModal').addEventListener('shown.bs.modal', startCamera);
  // Stop camera when modal is hidden
  document.getElementById('cameraModal').addEventListener('hidden.bs.modal', closeModal);
</script>

<div class="container py-3">
  <h5 class="text-center" style="color: black">Edit your particulars</h5>
  <div style='font-size: 0.9em;'>
  <!--Display messages at the top of the page-->
  <%- if flash[:notice] %>
    <div class="alert alert-info text-center"><%= flash[:notice] %></div>
  <%- elsif flash[:success] %>
    <div class="alert alert-success text-center"><%= flash[:success] %></div>
  <%- elsif flash[:error_message].present? %>
    <div class="alert alert-danger">
      <ul><%= flash[:error_message] %></ul>
      <% if flash[:error].present? %>
        <ul>
          <% flash[:error].each do |error| %>
            <li><%= error %></li>
          <% end %>
        </ul>
      <% end %>
    </div>
  <% end %>
</div>
  <!-- user_particulars_confirm_path leads to the confirm function!-->
  <%= form_with model: @user_particular, url: user_particular_path(@user_particular), method: :put, local: true do |form| %>
    <%= form.hidden_field :user_id, value: current_user.id %>
    <div class="row">
      <div class='col-9'>
        <div class="form-group">
          <%= form.label :full_name, "Full Name" %><span class="text-danger">*</span>
          <%= form.text_field :full_name, class: "form-control", required: true %>
        </div>
        <div class="form-group">
          <%= form.label :phone_number, "Phone number" %><span class="text-danger">*</span>
          <div class="row">
            <div class="col" style="max-width: 125px; min-width: 125px;">
              <%= form.select :phone_number_country_code, options_for_select(@country_code_options, @user_particular["phone_number_country_code"]), {}, { class: "form-control", required: true, id: "country_code_select" } %>
            </div>
            <div class="col">
              <%= form.telephone_field :phone_number, class: "form-control", required: true, id: "phone_number_field" %>
            </div>
          </div>
        </div>
        <div class="form-group">
          <%= form.label :secondary_phone_number, "Secondary phone number (optional)" %>  
          <div class="row">
            <div class="col" style="max-width: 125px; min-width: 125px;">
              <%= form.select :secondary_phone_number_country_code, options_for_select([['', '']] + @country_code_options, @user_particular["secondary_phone_number_country_code"]), {}, { class: "form-control", id: "country_code_select_secondary" } %>
            </div>
            <div class="col">
              <%= form.telephone_field :secondary_phone_number, class: "form-control", id: "phone_number_field_secondary" %>
            </div>
          </div>
        </div>
        <div class="form-group">
          <%= form.hidden_field :full_phone_number, class: "form-control", id: "full_phone_number_field", readonly: true %>
        </div>
        <div class="form-group">
          <%= form.hidden_field :full_secondary_phone_number, class: "form-control", id: "full_secondary_phone_number_field", readonly: true %>
        </div>
      </div>

      <div class='col-3 d-flex flex-column justify-content-center align-items-center px-4'>
        <label class="m-0">Passport-Style Photo<span class="text-danger">*</span></label>
        <label id="profilePictureLabel" for="profile_picture" class="p-1 mb-0 form-group d-flex flex-grow-1 justify-content-center align-items-center text-center text-muted" style="cursor: pointer; border: 5px dashed rgba(198, 198, 198, 0.65); height: 200px; width: 200px; overflow: hidden;">
          <% if @user_particular.profile_picture.attached? %>
            <img src="<%= url_for(@user_particular.profile_picture) %>" alt="Profile Picture" style="max-width: 100%; max-height: 100%; object-fit: cover;">
          <% else %>
            Upload a photo of yourself here
          <% end %>
        </label>
        <%= form.file_field :profile_picture, id: "profile_picture", accept: 'image/jpeg,image/gif,image/png,application/pdf', class: "form-control-file", style: "display: none;" %>
        <input type="file" accept="image/*" capture="camera" id="cameraInput" style="display: none;">
        <button type="button" class='mt-1 py-1 btn btn-dark' onclick="startCamera()" data-bs-toggle="modal" data-bs-target="#cameraModal">Or take one right now ðŸ“¸</button>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :country_of_origin, "Country of Origin" %><span class="text-danger">*</span>
      <%= form.select :country_of_origin, options_for_select(@countries, @user_particular["country_of_origin"]), {}, { class: "form-control", required: true } %>
    </div>
    <div class="form-group">
      <%= form.label :ethnicity, "Ethnicity" %><span class="text-danger">*</span>
      <%= form.select :ethnicity, options_for_select(@ethnicities, @user_particular["ethnicity"]), {}, { class: "form-control", required: true, id: "ethnicity_select" } %>
      <!-- Hidden Text Field for Ethnicity -->
      <div>
        <input id="ethnicity_other_field" name="others[ethnicity]" type="text" class="form-control" placeholder="Specify other ethnicity" style="display: none;">
      </div>
    </div>
    <div class="form-group">
      <%= form.label :religion, "Religion" %><span class="text-danger">*</span>
      <%= form.select :religion, options_for_select(@religions, @user_particular["religion"]), {}, { class: "form-control", required: true, id: "religion_select" } %>
      <!-- Hidden Religion Other Field -->
      <div>
        <input id="religion_other_field" name="others[religion]" type="text" class="form-control" placeholder="Specify other religion" style="display: none;">
      </div>
    </div>
    <div class="form-group">
      <%= form.label :gender, "Gender" %><span class="text-danger">*</span>
      <%= form.select :gender, options_for_select(['Male', 'Female', 'Others'], @user_particular["gender"]), {}, { class: "form-control", required: true, id: "gender_select" } %>
      <!-- Hidden Text Field for Gender -->
      <div>
        <input id="gender_other_field" name="others[gender]" type="text" class="form-control" placeholder="Specify other gender" style="display: none;">
      </div>
    </div>
    <div class="form-group">
      <%= form.label :date_of_birth, "Date of Birth" %><span class="text-danger">*</span>
      <%= form.date_field :date_of_birth, class: "form-control", required: true %>
    </div>
    <div class="form-group">
      <%= form.label :date_of_arrival, "Date of Arrival in Malaysia" %><span class="text-danger">*</span>
      <%= form.date_field :date_of_arrival, class: "form-control", required: true %>
    </div>
    <div class="text-center">
      <%= form.submit "Update", class: "px-3 btn btn-danger" %>
    </div> 

  <% end %>

  <!-- Modal for taking a photo -->
    <div class="modal fade" id="cameraModal" tabindex="-1" aria-labelledby="cameraModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="cameraModalLabel">Please capture a photo of yourself</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <video id="cameraFeed" style="width: 100%; height: auto;" autoplay></video>
          </div>
          <div class="modal-footer d-flex justify-content-center">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeModal()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="capturePhoto()">Capture</button>
          </div>
        </div>
      </div>
    </div>

</div>
<%# For concatenating the numbers to full number %>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Simplify element selection by using an object to group related elements
    const elements = {
      primary: {
        countryCodeSelect: document.getElementById("country_code_select"),
        phoneNumberField: document.getElementById("phone_number_field"),
        fullPhoneNumberField: document.getElementById("full_phone_number_field")
      },
      secondary: {
        countryCodeSelect: document.getElementById("country_code_select_secondary"),
        phoneNumberField: document.getElementById("phone_number_field_secondary"),
        fullPhoneNumberField: document.getElementById("full_secondary_phone_number_field")
      }
    };

    // Consolidate the full phone number update logic into a single function
    function updateFullPhoneNumber(elementGroup) {
      elementGroup.fullPhoneNumberField.value = (elementGroup.countryCodeSelect.value + '-' + elementGroup.phoneNumberField.value).slice(1);
    }

    // Update both primary and secondary phone number fields
    function updateAllFullPhoneNumbers() {
      updateFullPhoneNumber(elements.primary);
      updateFullPhoneNumber(elements.secondary);
    }

    // Simplify the event listener setup for both select elements
    function setupEventListeners(elementGroup) {
      const { countryCodeSelect, phoneNumberField } = elementGroup;

      countryCodeSelect.addEventListener("change", () => updateAllFullPhoneNumbers());
      phoneNumberField.addEventListener("input", () => updateAllFullPhoneNumbers());

      // Combine the focus and blur event listeners into a single function
      function handleSelectElementEvents(event) {
        const selectElement = event.target;
        // Iterate over all options in the select element
        for (let option of selectElement.options) {
          // Retrieve the full text from the data attribute or use the option's text if not available
          const fullText = option.getAttribute("data-full-text") || option.text;
          // On focus, set the option's text to its full text for display
          if (event.type === "focus") {
            option.text = fullText;
            // Ensure the full text is stored in the data attribute for future reference
            option.setAttribute("data-full-text", fullText);
          } else if (event.type === "blur") {
            // On blur, revert the option's text to its value for a simplified display
            option.text = option.value;
          }
        }
      }

      countryCodeSelect.addEventListener("focus", handleSelectElementEvents);
      countryCodeSelect.addEventListener("blur", handleSelectElementEvents);
      countryCodeSelect.dispatchEvent(new Event('change')); // Initialize display
    }

    // Apply event listeners to both primary and secondary elements
    setupEventListeners(elements.primary);
    setupEventListeners(elements.secondary);

    // Initial update for both phone number fields
    updateAllFullPhoneNumbers();

    // Initialize values for other dropdown field if value exists and is not in dropdown options
    // Convert Ruby dropdown option arrays to JSON 
    const ethnicityOptions = <%= @ethnicities.to_json.html_safe %>;
    const religionOptions = <%= @religions.to_json.html_safe %>;
    const genderOptions = ['Male', 'Female'];

    // Get values from params
    const ethnicityValue = "<%= @user_particular['ethnicity'].to_s %>";
    const religionValue = "<%= @user_particular['religion'].to_s %>";
    const genderValue = "<%= @user_particular['gender'].to_s %>";

    // Function to toggle visibility of "Others" fields and set value for hidden input field
    function initialiseOtherField(selectId, otherFieldId, value, options) {
      const selectElement = document.getElementById(selectId);
      const otherField = document.getElementById(otherFieldId);
      
      if (options.includes(value)) {
        selectElement.value = value;
        otherField.style.display = 'none';
      } else {
        selectElement.value = 'Others';
        otherField.style.display = 'block';
        otherField.value = value;
      }
    }

    // Apply the logic for each field
    initialiseOtherField('ethnicity_select', 'ethnicity_other_field', ethnicityValue, ethnicityOptions);
    initialiseOtherField('gender_select', 'gender_other_field', genderValue, genderOptions);
    initialiseOtherField('religion_select', 'religion_other_field', religionValue, religionOptions);
    
    // Function to toggle visibility of input Others fields
    function toggleOtherField(selectElementId, otherFieldId) {
      const selectElement = document.getElementById(selectElementId);
      const otherField = document.getElementById(otherFieldId);
      
      selectElement.addEventListener('change', function() {
        if (this.value === 'Others') {
          otherField.style.display = 'block';
        } else {
          otherField.style.display = 'none';
          otherField.value = '';
        }
      });
    }

    // Initialize toggle for each dropdown
    toggleOtherField('religion_select', 'religion_other_field');
    toggleOtherField('ethnicity_select', 'ethnicity_other_field');
    toggleOtherField('gender_select', 'gender_other_field');
  });

  // Handles file upload change event
  const fileInput = document.getElementById('profile_picture');
  fileInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const img = document.createElement('img');
        img.src = e.target.result;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';

        const label = document.getElementById('profilePictureLabel');
        label.innerHTML = ''; // Clear existing content
        label.appendChild(img);
      };
      reader.readAsDataURL(file);
    }
  });

  // Handles camera input change event
  function startCamera() {
    const video = document.getElementById('cameraFeed');

    navigator.mediaDevices.getUserMedia({ video: true })
      .then(stream => {
        video.srcObject = stream;
      })
      .catch(err => {
        console.error("Error accessing the camera: ", err);
      });
  }

  function closeModal() {
    const video = document.getElementById('cameraFeed');
    const stream = video.srcObject;
    const tracks = stream.getTracks();

    tracks.forEach(track => {
      track.stop();
    });

    video.srcObject = null;
  }

  function capturePhoto() {
    const video = document.getElementById('cameraFeed');
    const label = document.getElementById('profilePictureLabel');
    const labelWidth = label.clientWidth;
    const labelHeight = label.clientHeight;

    const canvas = document.createElement('canvas');
    canvas.width = labelWidth;
    canvas.height = labelHeight;
    const context = canvas.getContext('2d');
    context.drawImage(video, 0, 0, canvas.width, canvas.height);

    const dataUrl = canvas.toDataURL('image/png'); //base64-encoded image representation string
    const img = document.createElement('img');
    img.src = dataUrl; // This one saves dataUrl into the img.src
    img.style.width = '100%';
    img.style.height = '100%';
    img.style.objectFit = 'cover';

    label.innerHTML = '';
    label.appendChild(img);

    // Convert base64 string to Blob and then to file
    const blob = dataURLToBlob(dataUrl);
    const file = new File([blob], 'profile_picture.png', { type: 'image/png' });

    // Simulates user selecting a file manually
    const fileInput = document.getElementById('profile_picture');
    const dataTransfer = new DataTransfer(); 
    dataTransfer.items.add(file);
    fileInput.files = dataTransfer.files; 

    // Close the modal programmatically using Bootstrap's modal methods
    const modal = bootstrap.Modal.getInstance(document.getElementById('cameraModal'));
    modal.hide();

    closeModal();
  }

  function dataURLToBlob(dataURL) {
    const [header, data] = dataURL.split(',');
    const mime = header.match(/:(.*?);/)[1];
    const binary = atob(data);
    const array = [];

    for (let i = 0; i < binary.length; i++) {
      array.push(binary.charCodeAt(i));
    }

    return new Blob([new Uint8Array(array)], { type: mime });
  }

  // Start camera when modal is shown
  document.getElementById('cameraModal').addEventListener('shown.bs.modal', startCamera);
  // Stop camera when modal is hidden
  document.getElementById('cameraModal').addEventListener('hidden.bs.modal', closeModal);
</script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/vue@2.7.10/dist/vue.js"></script>

<style>
  #app {
    height: 500px; /* Adjust this value based on your needs */
    overflow-y: scroll;
  }

  body {
    background-color: #fffff;  
    background-image: url('<%= asset_path('showbg.svg') %>');
    background-size: cover;
    background-position: center;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.5);
  }
</style>

<div class='p-5 row d-flex justify-content-between'>
  <div class='col-4 p-3' style='font-size: 0.8em'>
    <h2 class> Scroll for more information: </h2>
    <div id="app" v-scroll="onScroll">
      <div class="card_2" v-for="(card, index) in styledCards" :style="card.style" :key="index">
        <div class="card_content_2">
          <h3>{{card.title}}</h3>
          <p>{{card.description}}</p>
        </div>
      </div>
    </div>
  </div>
  <div class="ml-6 col-3 p-3" style='font-size: 0.8em'>
    <h4 class="text-center rounded mt-3">Verify the User's <strong style="color: #f1536a;">EnableID</strong></h4>
    <%= render partial: "user_particulars/digitalid", locals: { user_particular: @user_particular } %>
  </div>
  <div class="col-3 formcol p-3" style='font-size: 0.8em'>
    <%= form_with url: confirm_verify_ngo_user_path(@ngo_user), method: :post, local: true, id: "verify" do %>
      <input type="hidden" name="unique_id" value="<%= @user_particular.unique_id %>">
      ...
      <h5 style='color:white;'>Please ensure that all these information is present before verifying:</h5>
      <div class="inputGroup">
        <input id="option1" name="option1" type="checkbox"/>
        <label for="option1">Full name</label>
      </div>
      <div class="inputGroup">
        <input id="option2" name="option2" type="checkbox"/>
        <label for="option2">Country of Origin</label>
      </div>
      <div class="inputGroup">
        <input id="option3" name="option3" type="checkbox"/>
        <label for="option3">Date of Birth</label>
      </div>
      <div class="inputGroup">
        <input id="option4" name="option4" type="checkbox"/>
        <label for="option4">Date of Arrival</label>
      </div>
      <div class="inputGroup">
        <input id="option5" name="option5" type="checkbox"/>
        <label for="option5">Phone Number</label>
      </div>
      <div class='d-flex justify-content-around gap-1 mt-auto mb-2 '>
        <%= submit_tag "Verify", class: "px-5 btn btn-info mt-3", id: "verify-btn", disabled: true %>
      </div>
    <% end %>
  </div>
</div>

<script type="text/javascript">
  document.addEventListener('DOMContentLoaded', function() {
    document.title = 'Gebirah - EnableID Verification';
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const checkboxes = document.querySelectorAll('.inputGroup input[type="checkbox"]');
    const verifyButton = document.getElementById('verify-btn');
    let allCheckboxesChecked = false; // Flag to track the state of checkboxes

    function updateVerifyButtonState() {
      allCheckboxesChecked = Array.from(checkboxes).every(checkbox => checkbox.checked);
      verifyButton.disabled = !allCheckboxesChecked;
    }

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateVerifyButtonState);
    });

    verifyButton.addEventListener('click', function(event) {
      if (!allCheckboxesChecked) { // Use the flag to determine if the alert should be shown
        event.preventDefault();
        alert('Please complete the checklist before verifying.');
      }
    });

    updateVerifyButtonState(); // Initial check to ensure correct button state on page load
  });
</script>


<script>
const cardsData = [
   {
    title: 'Access to services:',
    description: 'Verification can help undocumented individuals gain access to essential services such as healthcare, education, and social services.',
  },
  {
    title: 'Emergency Assistance:',
    description: 'They can receive timely help during emergencies, as NGOs and other organizations can quickly verify their identity and needs.',
  },
  {
    title: 'Access to Basic Needs:',
    description: 'Verifying a refugee allows them to receive food, water, and shelter from various NGOs, significantly improving their living conditions and overall well-being.',
  },
  // Add more titles below
  {
    title: 'Personal Information:',
    description: 'Verify that the personal details (such as name, date of birth, and other identifying information) on the EnableID match the information provided by the individual.',
  },
  {
    title: 'Data Integrity:',
    description: 'Confirm that the data on the EnableID has not been tampered with. This includes checking for any signs of alteration or corruption in the digital records.',
  }
  // You can continue adding more titles and descriptions in the same format
  
];

Vue.directive('scroll', {
  inserted: function (el, binding) {
    let f = function (evt) {
      if (binding.value(evt, el)) {
        window.removeEventListener('scroll', f)
      }
    }
    window.addEventListener('scroll', f)
  }
})

new Vue({
  el: '#app',
  data: {
    cards: cardsData,
    scrollPosition: 0
  },
 
  computed: {
    styledCards () {
      return this.cards.map(this.calculateCardStyle)
    }
  },
  methods: {
    onScroll () {
      this.scrollPosition = window.scrollY
    },
    calculateCardStyle (card, index) {
      const cardHeight = 160 // height + padding + margin
      
      const positionY = index * cardHeight
      const deltaY = positionY - this.scrollPosition

      // constrain deltaY between -160 and 0
      const dY = this.clamp(deltaY, -cardHeight, 0)

      const dissapearingValue = (dY / cardHeight) + 1
      const zValue = dY / cardHeight * 50
      const yValue = dY / cardHeight * -20

      card.style = {
        opacity: dissapearingValue,
        transform: `perspective(200px) translate3d(0,${yValue}px, ${zValue}px)`
      }
      return card
    },

     
    created() {
      window.addEventListener('scroll', this.onScroll);
    },
    destroyed() {
      window.removeEventListener('scroll', this.onScroll);
    },




    clamp (value, min, max) {
      return Math.min(Math.max(min, value), max)
    }
  }
})
</script>